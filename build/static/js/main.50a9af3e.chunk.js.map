{"version":3,"sources":["InputBar/InputBar.js","SendButton/SendButton.js","MessageBubble/MessageBubble.js","MessagesWindow/MessagesWindow.js","ChatWindow/ChatWindow.js","App.js","serviceWorker.js","index.js"],"names":["InputBar","props","state","content","e","this","onChange","target","value","className","type","handleChange","bind","Component","SendButton","src","img","alt","handleClick","onClick","MessageBubble","style","backgroundColor","author","MessagesWindow","messageAuthorPair","username","messages","map","username_message_pair","key","indexOf","getClassForMessageRow","getBackgroundColor","getMessages","ChatWindow","currentMessageContent","fetchedMessage","endpoint","setUpSocket","console","log","addMessageToState","sendMessage","socket","emit","setState","prevState","handleContentChange","submitMessage","io","on","data","data_json","JSON","parse","App","window","location","href","slice","lastIndexOf","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.50a9af3e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './InputBar.css';\nexport default class InputBar extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            content: \"\"\n        }\n    }\n\n    handleChange(e){\n        this.props.onChange(e.target.value);\n    }\n\n    render() {\n        return (\n            <div className=\"inputbar\">\n                <input type=\"text\" onChange={this.handleChange=this.handleChange.bind(this)}/>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport './SendButton.css';\nexport default class SendButton extends Component {\n\n  constructor(props){\n    super(props);\n    this.content = null;\n    if(this.props.type === \"text\"){\n      this.content = \"Send\";\n    }\n    else{\n      this.content = <img src={this.props.img} alt=\"send\"/>\n    }\n  }\n  handleClick(){\n    this.props.handleClick();\n  }\n  render() {\n    return (\n      <div className=\"sendbutton\" onClick={() => {this.handleClick()}}>\n        {this.content}\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport \"./MessageBubble.css\";\nexport default class MessageBubble extends Component {\n\n    constructor(props){\n        super(props);\n    }\n    render() {\n        return (\n          <div style={{backgroundColor: this.props.backgroundColor}} className=\"messagebubble\">\n             <div className=\"messagebubble-author\">\n                 { this.props.author }\n             </div>\n             <div className=\"messagebubble-content\">\n                 { this.props.content }\n             </div>\n\n          </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport \"./MessagesWindow.css\";\nimport MessageBubble from \"../MessageBubble/MessageBubble\";\nexport default class MessagesWindow extends Component {\n\n    constructor(props){\n        super(props);\n\n    }\n\n    getBackgroundColor(messageAuthorPair){\n        if(this.props.username === messageAuthorPair[\"username\"]){\n            return \"#0583F2\";\n        }\n        return \"#F2F2F2\"\n    }\n\n    getClassForMessageRow(messageAuthorPair){\n        if(this.props.username === messageAuthorPair[\"username\"]){\n            return \"messageswindow-row-reverse\";\n        }\n        return \"messageswindow-row\";\n    }\n\n\n\n\n    getMessages(){\n\n      const messages = this.props.messages.map((username_message_pair) =>\n        <div key={this.props.messages.indexOf(username_message_pair)}\n             className={this.getClassForMessageRow(username_message_pair)}>\n\n            <div className=\"messageswindow-message\">\n                <MessageBubble author={username_message_pair[\"username\"]}\n                               content={username_message_pair[\"message\"]}\n                               backgroundColor={this.getBackgroundColor(username_message_pair)}/>\n            </div>\n        </div>\n\n      );\n\n      return messages\n    }\n\n    render() {\n        return (\n          <div className=\"messageswindow\">\n            { this.getMessages() }\n          </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport io from 'socket.io-client';\nimport './ChatWindow.css';\nimport InputBar from \"../InputBar/InputBar\";\nimport SendButton from \"../SendButton/SendButton\";\nimport MessagesWindow from \"../MessagesWindow/MessagesWindow\";\nexport default class ChatWindow extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n        username: this.props.username,\n        currentMessageContent: \"\",\n        fetchedMessage: \"\",\n        messages: []\n    };\n    this.endpoint = \"http://127.0.0.1:5000\";\n    this.setUpSocket();\n    console.log(\"In Chat Window, username is: \" + this.state.username);\n\n\n  }\n\n  submitMessage(){\n      this.addMessageToState();\n      this.sendMessage();\n\n  }\n\n  addMessageToState(){\n    console.log(\"message added\");\n  }\n  sendMessage(){\n      this.socket.emit(\"send message\", {\"message\": this.state.currentMessageContent,\n                                        \"username\": this.state.username});\n      console.log( this.state.username + \" sent: \" + this.state.currentMessageContent);\n\n  }\n\n  handleContentChange(value){\n      this.setState((prevState) => ({currentMessageContent: value}));\n  }\n  render() {\n    return (\n      <div className=\"chatwindow\">\n        <div className=\"chatwindow-messages\">\n          <MessagesWindow username={this.state.username} messages={this.state.messages}/>\n        </div>\n\n        <div className=\"chatwindow-input\">\n            <div className=\"chatwindow-inputbar\">\n                <InputBar onChange={this.handleContentChange.bind(this)}/>\n            </div>\n            <div className=\"chatwindow-inputbutton\">\n                <SendButton type=\"text\" handleClick={() => {this.submitMessage()}}/>\n            </div>\n        </div>\n      </div>\n    )\n  }\n\n  setUpSocket(){\n      this.socket = io(this.endpoint);\n      this.socket.on(\"connect\", () =>{\n          console.log(\"socket connected\");\n      });\n\n      this.socket.on(\"disconnected\", () => {\n          console.log(\"socket disconnected\");\n      });\n\n      this.socket.on(\"receive init messages\", (data) => {\n          console.log(\"init messages \" + data[\"username_message_pairs\"]);\n          const data_json = JSON.parse(data[\"username_message_pairs\"]);\n          this.setState((prevState) =>({messages: data_json}));\n      });\n\n      this.socket.on(\"receive message\",\n          (data) => {\n              const  username_message_pair = JSON.parse(data[\"username_message_pair\"]);\n              this.setState(\n                  (prevState) => ({messages: [...prevState.messages, username_message_pair]})\n              );\n          });\n\n      this.socket.emit(\"fetch init messages\");\n  }\n}\n","import React, {Component} from 'react';\n\nimport './App.css';\nimport ChatWindow from \"./ChatWindow/ChatWindow\";\n\nexport default class App extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            username: window.location.href.slice(window.location.href.lastIndexOf(\"/\") + 1)\n        }\n\n    }\n\n\n    render() {\n      return (\n          <div className=\"App\">\n              <div className=\"App-chatwindow\">\n                  <ChatWindow username={this.state.username} />\n              </div>\n          </div>\n      )\n  }\n\n  }\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}