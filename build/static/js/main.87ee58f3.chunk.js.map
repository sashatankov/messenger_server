{"version":3,"sources":["InputBar/InputBar.js","SendButton/SendButton.js","WelcomeWindow/WelcomeWindow.js","App.js","serviceWorker.js","index.js"],"names":["InputBar","props","state","content","e","this","onChange","target","value","className","type","handleChange","bind","Component","SendButton","handleClick","onClick","WelcomeWindow","name","setState","prevState","fetch","method","body","JSON","stringify","username","headers","then","response","text","url","console","log","window","location","href","catch","error","handleContentChange","submitName","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"iWAEqBA,G,8DAEjB,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,CACTC,QAAS,IAHC,E,yDAOLC,GACTC,KAAKJ,MAAMK,SAASF,EAAEG,OAAOC,S,+BAI7B,OACI,yBAAKC,UAAU,YACX,2BAAOC,KAAK,OAAOJ,SAAUD,KAAKM,aAAaN,KAAKM,aAAaC,KAAKP,a,GAhBhDQ,cCAjBC,G,wDAEnB,WAAYb,GAAO,uCACXA,G,0DAINI,KAAKJ,MAAMc,gB,+BAEH,IAAD,OACP,OACE,yBAAKN,UAAU,aAAaO,QAAS,WAAO,EAAKD,gBAAjD,a,GAXkCF,cCEnBI,E,kDAEnB,WAAYhB,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXgB,KAAM,IAHQ,E,gEAOEV,GAClBH,KAAKc,UAAS,SAACC,GAAD,MAAgB,CAACF,KAAMV,Q,mCAIrCa,MAAM,uBACF,CAACC,OAAQ,OACLC,KAAMC,KAAKC,UAAU,CAACC,SAAUrB,KAAKH,MAAMgB,OAC3CS,QAAS,CAAC,eAAgB,sBAG7BC,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACG,GACLC,QAAQC,IAAIF,GACZG,OAAOC,SAASC,KAAOL,KAExBM,OAAM,SAACC,GACNN,QAAQC,IAAIK,Q,+BAIV,IAAD,OACP,OACE,yBAAK7B,UAAU,iBACb,yBAAKA,UAAU,sBAAf,0BACyB,6BADzB,IACgC,6BADhC,0BAGA,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,0BACb,kBAAC,EAAD,CAAUH,SAAUD,KAAKkC,oBAAoB3B,KAAKP,SAEpD,yBAAKI,UAAU,6BACb,kBAAC,EAAD,CAAYC,KAAK,OAAOK,YAAa,WAAO,EAAKyB,uB,GA3ClB3B,aCS5B4B,MAVf,WACE,OACE,yBAAKhC,UAAU,OACX,yBAAKA,UAAU,2BACX,kBAAC,EAAD,SCKQiC,QACW,cAA7BR,OAAOC,SAASQ,UAEe,UAA7BT,OAAOC,SAASQ,UAEhBT,OAAOC,SAASQ,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdjB,OAAM,SAAAC,GACLN,QAAQM,MAAMA,EAAMiB,c","file":"static/js/main.87ee58f3.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './InputBar.css';\nexport default class InputBar extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            content: \"\"\n        }\n    }\n\n    handleChange(e){\n        this.props.onChange(e.target.value);\n    }\n\n    render() {\n        return (\n            <div className=\"inputbar\">\n                <input type=\"text\" onChange={this.handleChange=this.handleChange.bind(this)}/>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport './SendButton.css';\nexport default class SendButton extends Component {\n\n  constructor(props){\n    super(props);\n\n  }\n  handleClick(){\n    this.props.handleClick();\n  }\n  render() {\n    return (\n      <div className=\"sendbutton\" onClick={() => {this.handleClick()}}>\n        Login\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport './WelcomeWindow.css';\nimport InputBar from \"../InputBar/InputBar\";\nimport SendButton from \"../SendButton/SendButton\";\nexport default class WelcomeWindow extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      name: \"\"\n    };\n  }\n\n  handleContentChange(value){\n    this.setState((prevState) => ({name: value}));\n  }\n\n  submitName(){\n    fetch(\"/welcome/submit_name\",\n        {method: \"post\",\n            body: JSON.stringify({username: this.state.name}),\n            headers: {\"Content-type\": \"application/json\"},\n\n        })\n        .then((response) => {\n          return response.text();\n        })\n        .then((url) => {\n          console.log(url);\n          window.location.href = url;\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n  }\n\n  render() {\n    return (\n      <div className=\"welcomewindow\">\n        <div className=\"welcomewindow-info\">\n          Welcome to group chat! <br /> <br />Please state your name\n        </div>\n        <div className=\"welcomewindow-input\">\n          <div className=\"welcomewindow-inputbar\">\n            <InputBar onChange={this.handleContentChange.bind(this)}/>\n          </div>\n          <div className=\"welcomewindow-inputbutton\">\n            <SendButton type=\"text\" handleClick={() => {this.submitName()}}/>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport WelcomeWindow from \"./WelcomeWindow/WelcomeWindow\";\nfunction App() {\n  return (\n    <div className=\"App\">\n        <div className=\"welcomewindow-container\">\n            <WelcomeWindow />\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}